@page "/"
@using System.Net.Http.Json
@using WeatherApp.Shared
@using System.Text.Json
@using System.Text
@using System.Security.Cryptography
@using System.Globalization
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Newtonsoft.Json.Linq;

<link href="css/site.css" rel="stylesheet" />

<style>
    body {
    font-family: Arial;
    }

    * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    }
    p {
        margin-bottom:10px;
    }
    .main-container {
    /* background: url("weather-BG.jpg") no-repeat center top; */
    background: rgb(48,223,247);
    background: linear-gradient(90deg, rgba(48,223,247,1) 0%, rgba(0,159,181,1) 100%);
    width: 550px;
    border-radius: 16px;
    border: 4px solid #fff;
    box-shadow: 0 0 5px rgba(0,0,0,0.5);
    padding: 20px;
    margin-left: 53%;
    margin-top: -24%;
    }

    .city-weather {
    width: 460px;
    min-height: 200px;
    box-shadow: 0 0 1rem 0 rgba(0, 0, 0, .2);
    border-radius: 16px;
    background-color: rgba(255, 255, 255, .25);
    backdrop-filter: blur(5px);
    border: 3px solid rgba(255, 255, 255, 0.36);
    margin: 0 auto;
    padding: 20px;
    }

    .main-title {
    text-align: center;
    color: #fff;
    font-family: Arial;
    font-size: 32px;
    line-height: 34px;
    background: url("images/weather-icon.png") no-repeat left center;
    background-size: 80px;
    }

    .main-title span {
    display: block;
    text-transform: uppercase;
    font-weight: bold;
    font-size: 32px;
    }

    .forecast-card-container {
    min-height: 200px;
    background-color: rgba(255, 255, 255, .25);
    backdrop-filter: blur(5px);
    margin: 0 auto;
    padding: 20px;
    }

    .forecast-card-item {
    padding: 10px;
    border-bottom: 1px solid #fff;
    display: flex;
    }

    .forecast-card-item:last-child {
    border: 0;
    }

    .box1 {
    width: 50%;
    color: #fff;
    }

    .box2 {
    width: 50%;
    color: #fff;
    border-left: 1px dashed #fff;
    }
</style>

<EditForm Model="cityInfo" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="main">
        <div class="popup-window" style="margin-left: -53%;">
            <h1>Weather App</h1>
            <div class="form-wrapper">
                <div class="field-wrapper">
                    <InputText @bind-Value="cityInfo.CityName" class="txt-box" placeholder="City Name" />
                    <ValidationMessage For="() => cityInfo.CityName" />
                </div>

                <div style="text-align: right; margin-top: 50px;">
                    <button type="submit" class="btn btn-primary">
                        <span>Submit</span>
@*                         @if (loading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        } *@
                    </button>
                </div>
            </div>
        </div>
    </div>

</EditForm>
<div class="main-container">
    @if (!string.IsNullOrEmpty(weatherJson))
    {

        <div class="city-weather">
            <p class="main-title">Weather in<span>@cityName</span></p>
            <div style="display: flex; margin-top: 30px;">
                <div class="box1" style="width: 50%; text-align: center;">
                    <p class="box-title" style="color: #fff; font-size: 20px; margin-bottom: 0;">Temperature</p>
                    <p style=" color: #fff; font-size: 32px;">@temperature<sup style="font-size: 20px; margin-left: 5px;">F&deg;</sup></p>
                </div>
                <div class="box2" style="width: 50%; text-align: center; border-left: 1px dashed #fff;">
                    <p class="box-title" style="color: #fff; font-size: 20px; margin-bottom: 0;">Condition</p>
                    <p style=" color: #fff; font-size: 20px;margin-bottom: 10px;">@condition</p>
                </div>
            </div>
        </div>

    }
    @if (!string.IsNullOrEmpty(forecastJson))
    {
        <p class="title-2" style="margin-top: 30px; margin-bottom: 10px; color: #fff; font-size: 24px; text-align: center; text-transform: uppercase; font-weight: bold; ">
            3 Day Forecast
        </p>
        <div class="forecast-card-container">
        @foreach (var forecast in forecastsData)
        {

            DateTime? parsedDate = !string.IsNullOrEmpty(forecast.DateTime)
            ? DateTime.Parse(forecast.DateTime)
            : (DateTime?)null;

            
                <div class="forecast-card-item">
                    <div class="box1" style="width: 50%; text-align: left;">
                        @if (parsedDate.HasValue)
                        {
                            <div style="display:flex;">
                                <div><span style="font-size: 60px; font-weight: bold;">@parsedDate.Value.Day.ToString("00")</span></div>
                                <div style="font-size: 24px; text-transform: uppercase; margin-top: 8px;">
                                    <span style="display:block">@parsedDate.Value.ToString("MMM")</span>
                                    <span style="display:block">@parsedDate.Value.Year</span>
                                </div>
                            </div>

                            <div style="">
                                <span style="text-align: left; text-transform: uppercase; font-size: 32px; font-weight: bold; letter-spacing: 0.5px;">@parsedDate.Value.DayOfWeek</span>
                            </div>
                        }
                    </div>
                    <div class="box2" style="width: 50%; text-align: left; border-left: 1px dashed #fff; padding-left: 25px; display: flex; flex-direction: column; justify-content: center;">
                        <div>
                            <span style="width: 80px; display: inline-block; text-align: right;">High:</span>
                            <span>@forecast.High<sup style="font-size: 14px; margin-left: 5px;">F&deg;</sup></span>
                        </div>
                        <div>
                            <span style="width: 80px; display: inline-block; text-align: right;">Low:</span>
                            <span>@forecast.Low<sup style="font-size: 14px; margin-left: 5px;">F&deg;</sup></span>
                        </div>
                        <div>
                            <span style="width: 80px; display: inline-block; text-align: right;">Condition:</span>
                            <span>@forecast.Condition</span>
                        </div>
                    </div>
                </div>
            
        }
        </div>
    }
</div>
<AlertMessage @ref="alertMessage" />


@code {
    private CityInfo cityInfo = new CityInfo();
    private string? IPAddress = string.Empty;
    private bool loading { get; set; } = false;
    private AlertMessage? alertMessage;
    private string weatherJson = "";
    private string forecastJson = "";
    private string cityName = "";
    private string condition = "";
    private double temperature = 0.0;
    private IpLocation? location;
    private List<WeatherData> forecastsData = new List<WeatherData>();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            location = await Http.GetFromJsonAsync<IpLocation>("https://ipwhois.app/json/");
            if(location != null)
            {
                if(location.City != null)
                {
                    cityInfo.CityName = location.City;
                    await HandleSubmit();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Caught exception: {ex.Message}");
            IPAddress = "";
        }

        base.OnInitialized();
    }

    private async Task HandleSubmit()
    {
        loading = true;
        StateHasChanged();

        var response = await Http.PostAsJsonAsync("api/GetWeatherInfo", cityInfo);
        if (response.IsSuccessStatusCode)
        {
            loading = false;
            var weatherModel = await response.Content.ReadFromJsonAsync<WeatherModel>();

            if (weatherModel != null && weatherModel.Json != null && weatherModel.ForecastJson != null)
            {
                weatherJson = weatherModel.Json;
                forecastJson = weatherModel.ForecastJson;

                try
                {
                    JObject data = JObject.Parse(weatherJson);
                    if (data != null)
                    {
                        cityName = data["name"].ToString();
                        condition = data["weather"]?[0]?["description"]?.ToString();
                        if (!string.IsNullOrEmpty(condition))
                        {
                            TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
                            condition = textInfo.ToTitleCase(condition);
                        }
                        temperature = data["main"]?["temp"]?.ToObject<double>() ?? 0;
                        cityInfo.CityName = "";
                    }
                }
                catch (Exception ex)
                {
                    ShowError("Error parsing weather data: " + ex.Message);
                }
                try
                {
                    JObject data = JObject.Parse(forecastJson);
                    DateTime today = DateTime.UtcNow.Date;
                    var forecasts = data["list"]
                     .Select(item => new
                     {
                         DateTime = DateTime.Parse(item["dt_txt"]?.ToString()),
                         High = item["main"]?["temp_max"]?.ToObject<double>() ?? 0,
                         Low = item["main"]?["temp_min"]?.ToObject<double>() ?? 0,
                         //Temp = item["main"]?["temp"]?.ToObject<double>() ?? 0,
                         Condition = item["weather"]?[0]?["description"]?.ToString()
                     })
                     .Where(f => f.DateTime.Date > today)
                     .GroupBy(f => f.DateTime.Date)
                     .Select(g => g.OrderBy(f => Math.Abs((f.DateTime - f.DateTime.Date.AddHours(12)).TotalHours)).First())
                     .Take(3)
                     .ToList();

                    forecastsData = new List<WeatherData>();
                    foreach (var forecast in forecasts)
                    {
                        WeatherData weatherdata = new WeatherData();
                        //conditionForecast = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(forecast.Condition ?? "Unknown");
                        weatherdata.DateTime = forecast.DateTime.ToString("yyyy-MM-dd");
                        weatherdata.High = forecast.High;
                        weatherdata.Low = forecast.Low;
                        weatherdata.Condition = forecast.Condition;
                        forecastsData.Add(weatherdata);
                    }
                    cityInfo.CityName = "";
                }
                catch (Exception ex)
                {
                    ShowError("Error parsing weather data: " + ex.Message);
                }
            }

        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
            string errorMessage = errorResponse?.Message ?? "An unknown error occurred.";

            ShowError(errorMessage);
            //Console.WriteLine("Error submitting form: " + errorMessage);
        }

        loading = false;
        StateHasChanged();
    }

    //success Message
    private void ShowSuccess()
    {
        alertMessage.ShowSuccess("Data saved successfully!");
    }
    //Error Message
    private void ShowError(string message)
    {
        alertMessage.ShowError(message);
    }

}
